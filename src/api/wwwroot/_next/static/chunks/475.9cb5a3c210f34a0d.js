"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[475],{1475:(t,e,a)=>{a.d(e,{createAssistant:()=>i,createDataSources:()=>w,deleteAssistant:()=>d,f4:()=>p,getAssistant:()=>o,sU:()=>n,yu:()=>E,getDataSources:()=>y,Zi:()=>l,updateAssistant:()=>u});let s=a(9509).env.NEXT_PUBLIC_API_URL||"http://localhost:5067";class r{async getAll(){let t=await fetch("".concat(this.baseUrl,"/assistants"));if(!t.ok)throw Error("Failed to fetch assistants: ".concat(t.statusText));return t.json()}async getById(t){return(await this.getAll()).find(e=>e.id===t)||null}async create(t){let e=await fetch("".concat(this.baseUrl,"/assistants"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!e.ok)throw Error("Failed to create assistant: ".concat(e.statusText));return e.json()}async query(t,e){let a=await fetch("".concat(this.baseUrl,"/assistants/").concat(t),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!a.ok)throw Error("Failed to query assistant: ".concat(a.statusText));return a.json()}async delete(t){let e=await fetch("".concat(this.baseUrl,"/assistants/").concat(t),{method:"DELETE"});if(!e.ok)throw Error("Failed to delete assistant: ".concat(e.statusText))}async update(t,e){let a=await fetch("".concat(this.baseUrl,"/assistants/").concat(t),{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!a.ok)throw Error("Failed to update assistant: ".concat(a.statusText))}constructor(t=s){this.baseUrl=t}}let c=new r,n=()=>c.getAll(),o=t=>c.getById(t),i=t=>c.create(t),l=(t,e)=>c.query(t,e),d=t=>c.delete(t),u=(t,e)=>c.update(t,e);class h{async getAll(){let t=await fetch("".concat(this.baseUrl,"/datasources"));if(!t.ok)throw Error("Failed to fetch data sources: ".concat(t.statusText));return t.json()}async getById(t){return(await this.getAll()).find(e=>e.id===t)||null}async create(t,e){let a=new FormData;t.forEach(t=>{a.append("files",t)}),a.append("name",e);let s=await fetch("".concat(this.baseUrl,"/datasources"),{method:"POST",body:a});if(!s.ok)throw Error("Failed to create data sources: ".concat(s.statusText));return s.json()}async delete(t){let e=await fetch("".concat(this.baseUrl,"/datasources/").concat(t),{method:"DELETE"});if(!e.ok)throw Error("Failed to delete data source: ".concat(e.statusText))}constructor(t=s){this.baseUrl=t}}let f=new h,y=()=>f.getAll(),w=(t,e)=>f.create(t,e),p=t=>f.delete(t),E=t=>{switch(t){case 0:return"Stream";case 1:return"File";case 2:return"GitHub";case 3:return"URL";case 4:return"Sitemap";default:return"Unknown"}}}}]);